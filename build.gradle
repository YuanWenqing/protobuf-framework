buildscript {
    repositories {
        mavenLocal()
        if (project.hasProperty("nexus")) {
            maven {
                name "nexus"
                url property("nexus.repo.url")
                credentials {
                    username property("nexus.username")
                    password property("nexus.password")
                }
            }
        } else {
            mavenCentral()
        }
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufPluginVersion"
        // http://ajoberstar.org/grgit/grgit-reference.html
        classpath "org.ajoberstar.grgit:grgit-gradle:$grgitGradleVersion"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// git version
apply plugin: "org.ajoberstar.grgit"
version = "0.9.3.alpha"
if (!project.hasProperty("release")) {
    int commits = grgit.log().size()
//    String abbreviatedId = grgit.head().abbreviatedId
    String branch = grgit.branch.current().name
    if (branch == 'master') {
        version = "${version}.${commits}"
    } else {
        String prefix = branch.replace("/", "-")
        version = "${prefix}-${version}.${commits}"
    }
}
println("version=$version")

// project setting
subprojects {
    group = "xyz.codemeans.protobuf4j"
    version = rootProject.version

    ext {
        publishable = true
    }

    repositories {
        mavenLocal()
        if (project.hasProperty("nexus")) {
            maven {
                name "nexus"
                url property("nexus.repo.url")
                credentials {
                    username property("nexus.username")
                    password property("nexus.password")
                }
            }
        } else {
            mavenCentral()
        }
    }

    apply plugin: "java"
    apply plugin: "java-library"

    // artifacts
    jar << {
        println "jar: ${archivePath}"
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allJava
        classifier = 'sources'
        doLast {
            println "sources: ${archivePath}"
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        doLast {
            println "sources: ${archivePath}"
        }
    }

    apply plugin: "jacoco"
    jacocoTestReport.dependsOn(test)
    jacocoTestReport << {
        println jacocoTestReport.reports.html.entryPoint
    }

    test << {
        println test.reports.html.entryPoint
    }

    dependencies {
        // test
        testImplementation("junit:junit:$junitVersion")
    }

}

project(":test-proto") {
    ext.publishable = false
}
project(":example") {
    ext.publishable = false
}
// 配置发布
configure(subprojects.findAll { it.ext.publishable }) {
    // 在这里应用插件，否则相关publishing配置无法生效
    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name "oss"
                def ossBaseUrl = "https://oss.sonatype.org/content/repositories"
                url = project.hasProperty("release") ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "$ossBaseUrl/snapshots"
                credentials {
                    username property("maven2.username")
                    password property("maven2.password")
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java

                if (project.hasProperty("release")) {
                    version = project.getVersion()
                } else {
                    version = project.getVersion() + "-SNAPSHOT"
                }

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'Protobuf4j: A Facility Framework to Develop with Google Protobuf'
                    description = 'A Facility Framework to Develop with Google Protobuf'
                    url = 'https://github.com/YuanWenqing/protobuf4j'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'yuanwq'
                            name = 'YuanWenqing'
                            email = 'ywq8876@163.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com:YuanWenqing/protobuf4j.git'
                        developerConnection = 'scm:git:ssh://github.com:YuanWenqing/protobuf4j.git'
                        url = 'https://github.com/YuanWenqing/protobuf4j'
                    }
                }
            }
        }
    }
    publish {
        doLast {
            def pub = publishing.publications.mavenJava
            println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
            for (repo in publishing.repositories) {
                println "upload to ${repo.url}"
            }
        }
    }
    publishToMavenLocal {
        doLast {
            def pub = publishing.publications.mavenJava
            println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
        }
    }
    task('local').dependsOn(publishToMavenLocal)

    apply plugin: "signing"  // generate a signature file for each artifact
    signing {
        sign publishing.publications.mavenJava
    }

}
